<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorMsg_BinaryStringEntityLengthCannotBeChanged" xml:space="preserve">
    <value>The length of this binary string cannot be changed.</value>
  </data>
  <data name="ErrorMsg_BoltzmannTotalOverflow" xml:space="preserve">
    <value>Calculation in {0} resulted in overflow.  This can often happen if Temperature setting is less than one.</value>
  </data>
  <data name="ErrorMsg_EmptyList" xml:space="preserve">
    <value>String cannot be null or empty.</value>
  </data>
  <data name="ErrorMsg_EntityCopyToTypeMismatch" xml:space="preserve">
    <value>The entity must be of type '{0}'.</value>
  </data>
  <data name="ErrorMsg_InsertChildNodeWithoutTree" xml:space="preserve">
    <value>Parent node must belong to a tree before child nodes can be added.</value>
  </data>
  <data name="ErrorMsg_InvalidPopulationReplacementValue" xml:space="preserve">
    <value>Setting '{0}' must be a fixed integer count greater than 0 or an integral percentage between 1 and 100.</value>
  </data>
  <data name="ErrorMsg_InvalidTimeLimit" xml:space="preserve">
    <value>The '{0}' setting must be a valid {1} value.  The value provided was '{2}'.</value>
  </data>
  <data name="ErrorMsg_InvalidWheelSliceSize" xml:space="preserve">
    <value>Size must be greater than or equal to zero.</value>
  </data>
  <data name="ErrorMsg_ListEntityBase_FixedSize" xml:space="preserve">
    <value>The list is a fixed size and cannot be changed.</value>
  </data>
  <data name="ErrorMsg_ListEntityBase_InvalidItemType" xml:space="preserve">
    <value>The specified item of type '{0}' cannot be casted to type '{1}' that is required by the list.</value>
  </data>
  <data name="ErrorMsg_ListEntityLengthCannotBeChanged" xml:space="preserve">
    <value>The length of this list cannot be changed.</value>
  </data>
  <data name="ErrorMsg_MismatchedMinMaxValues" xml:space="preserve">
    <value>The value of '{0}' must be less than or equal to '{1}'.</value>
  </data>
  <data name="ErrorMsg_MissingComponentConfiguration" xml:space="preserve">
    <value>There does not exist a component configuration for component '{0}'.</value>
  </data>
  <data name="ErrorMsg_MultiPointCrossoverOperationCrossoverPointValidator_ValidationError" xml:space="preserve">
    <value>Using partially matched crossover is only allowed for two crossover points.</value>
  </data>
  <data name="ErrorMsg_NonBinaryValueUsed" xml:space="preserve">
    <value>Only binary values (zero or one) are allowed.</value>
  </data>
  <data name="ErrorMsg_NullItemInList" xml:space="preserve">
    <value>Null item was contained in the list.</value>
  </data>
  <data name="ErrorMsg_PopulationReplacementValue_LessThanZero" xml:space="preserve">
    <value>Number of objects to be replaced must be a non-negative integer.  The value provided was '{0}'.</value>
  </data>
  <data name="ErrorMsg_TreeNodeCollectionCountError" xml:space="preserve">
    <value>The number of nodes in this collection is fixed and cannot be changed.</value>
  </data>
  <data name="ErrorMsg_VariableLengthListEntity_InsertBit_OutOfRange" xml:space="preserve">
    <value>The index must be greater or equal to zero and less than or equal to the length.</value>
  </data>
  <data name="ErrorMsg_VariableLengthListEntity_RemoveBit_OutOfRange" xml:space="preserve">
    <value>The index must be greater or equal to zero and less than the length.</value>
  </data>
  <data name="StatisticLogger_AlgorithmCompleted" xml:space="preserve">
    <value>Algorithm completed.</value>
  </data>
  <data name="StatisticLogger_AlgorithmStarted" xml:space="preserve">
    <value>Algorithm started.</value>
  </data>
  <data name="StatisticLogger_StatTrace" xml:space="preserve">
    <value>Statistic Name: {0}
Statistic Value: {1}
Population Index: {2}
Generation Index: {3}</value>
  </data>
</root>